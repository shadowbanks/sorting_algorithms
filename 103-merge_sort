#include "sort.h"

void merge(int *array, int left, int middle, int right);
void split(int *array, int left, int right);
/**
 * merge_sort - sort an array of integers using merge sort
 * @array: The array two be sorted
 * @size: size of the array
 *
 * Retrun: Nothing
 */
void merge_sort(int *array, size_t size)
{
	int len = size;
	if (!array || len < 2)
		return;
	split(array, 0, len - 1);
}

void split(int *array, int left, int right)
{
	int middle = 0;
	if (left < right)
	{
		middle = (left + right) / 2;

		/*Sort left and right halves*/
		split(array, left, middle);
		split(array, middle + 1, right);

		merge(array, left, middle, right);
	}
}

void merge(int *array, int left, int middle, int right)
{
	int i = 0, j = 0, k = 0, *leftArr = NULL, *rightArr = NULL, *arrayTemp = NULL;
	int num = middle - left + 1;
	int num2 = right - middle;

	(void)leftArr;
	(void)rightArr;
	arrayTemp = malloc(sizeof(int) * (num + num2));
	if (!arrayTemp)
		return;
	/*
	leftArr = malloc(sizeof(int) * (num + 1));
	if (!leftArr)
		return;
	rightArr = malloc(sizeof(int) * (num2 + 1));
	if (!rightArr)
	{
		free(leftArr);
		return;
	}*/
	
	/*Copy the data to a temp array leftArr and rightArr*/
	for (; i < num; i++)
		arrayTemp[k++] = array[left + i];
		/*leftArr[i] = array[left + i];*/
	for (j = middle + 1; j <= right; j++)
		arrayTemp[k++] = array[j];
		/*rightArr[j] = array[middle + 1 + j];*/

	/*Place vallue in right order in the array*/
	/*
	i = 0;
	j = 0;
	k = left;
	while (i < num && j < num2)
	{
		if (leftArr[i] <= rightArr[j])
		{
			array[k] = leftArr[i];
			i++;
		}
		else
		{
			array[k] = rightArr[j];
			j++;
		}
		k++;
	}*/
	i = 0, j = middle + 1; k = left;
	while (i < num && j <= right)
	{
		if (arrayTemp[i] <= arrayTemp[j])
			array[k++] = arrayTemp[i++];
		else
			array[k++] = arrayTemp[j++];
	}

	/*Any remaining data on the left*/
	/*
	while (i < num)
	{
		array[k] = leftArr[i];
		i++, k++;
	}

	/\*Any remaining data on the right*\/
	while (j < num2)
	{
		array[k] = rightArr[j];
		j++, k++;
	}

	free(leftArr);
	free(rightArr);
	*/
	while (i < num)
		array[k++] = arrayTemp[i++];

	while (j <= right)
		array[k++] = arrayTemp[j++];

	free(arrayTemp);
}
